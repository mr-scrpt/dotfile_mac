"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = void 0;
// Most of the parts are taken directly from https://github.com/prisma/vscode/blob/master/packages/vscode/src/extension.ts
// Imports are transformed so that they can work with CoC
const coc_nvim_1 = require("coc.nvim");
function createLanguageServer(serverOptions, clientOptions) {
    return new coc_nvim_1.LanguageClient("prisma", "Prisma Language Server", serverOptions, clientOptions);
}
async function activate(context) {
    const serverModule = require.resolve("@prisma/language-server/dist/src/bin");
    // The debug options for the server
    // --inspect=6009: runs the server in Node's Inspector mode so VS Code can attach to the server for debugging
    const debugOptions = {
        execArgv: ["--nolazy", "--inspect=6009"],
        env: { DEBUG: true },
    };
    // If the extension is launched in debug mode then the debug server options are used
    // Otherwise the run options are used
    const serverOptions = {
        run: { module: serverModule, transport: coc_nvim_1.TransportKind.ipc },
        debug: {
            module: serverModule,
            transport: coc_nvim_1.TransportKind.ipc,
            options: debugOptions,
        },
    };
    // Options to control the language client
    const clientOptions = {
        // Register the server for prisma documents
        documentSelector: [{ scheme: "file", language: "prisma" }],
    };
    // Create the language client
    let client = createLanguageServer(serverOptions, clientOptions);
    // Start the client. This will also launch the server
    let disposable = client.start();
    context.subscriptions.push(disposable);
    context.subscriptions.push(coc_nvim_1.commands.registerCommand("coc-prisma.restartLanguageServer", async () => {
        await client.stop();
        client = createLanguageServer(serverOptions, clientOptions);
        context.subscriptions.push(client.start());
        await client.onReady();
        coc_nvim_1.window.showInformationMessage("Prisma language server restarted.");
    }));
}
exports.activate = activate;
//# sourceMappingURL=index.js.map