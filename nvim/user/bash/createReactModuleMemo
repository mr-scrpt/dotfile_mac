#!/bin/bash

# Проверяем, передано ли имя модуля
if [ $# -eq 0 ]; then
  echo "Использование: $0 <название модуля>"
  exit 1
fi

module_name="$1"
module_name_lc="$(tr '[:upper:]' '[:lower:]' <<< ${module_name:0:1})${module_name:1}"

# Создаем родительскую папку
mkdir -p "$module_name"

# Создаем папку 'ui'
mkdir -p "$module_name/ui"

# Создаем файлы в папке 'ui'
ui_file="$module_name/ui/${module_name}.tsx"
scss_file="$module_name/ui/${module_name}.module.scss"

cat <<EOL > "$ui_file"
import { memo } from 'react';
import { classNames } from 'shared/lib/classNames';
import { ${module_name}Props } from '../type/props.type';
import cls from './${module_name}.module.scss';

export const ${module_name} = memo((props:${module_name}Props) => {
  const { className } = props;

  const cls${module_name} = classNames(cls.${module_name_lc}, [className], {});
  return (
    <div className={cls${module_name}}>

    </div>
  );
});
EOL

cat <<EOL > "$scss_file"
.${module_name_lc}  {
  margin: 0;
  padding: 0;
}
EOL

# Создаем папку 'type'
mkdir -p "$module_name/type"

# Создаем файл в папке 'type'
type_file="$module_name/type/props.type.ts"

cat <<EOL > "$type_file"
import { HTMLAttributes } from 'react';

export interface ${module_name}Props extends HTMLAttributes<HTMLDivElement> {
  className?: string;
}
EOL

# Создаем файл 'index.ts'
index_file="$module_name/index.ts"

cat <<EOL > "$index_file"
export { ${module_name} } from './ui/${module_name}';
EOL

echo "Модуль '$module_name' успешно создан."

